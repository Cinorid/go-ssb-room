// Code generated by counterfeiter. DO NOT EDIT.
package mockdb

import (
	"context"
	"sync"

	"github.com/ssb-ngi-pointer/go-ssb-room/admindb"
	refs "go.mindeco.de/ssb-refs"
)

type FakeAllowListService struct {
	AddStub        func(context.Context, refs.FeedRef) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 context.Context
		arg2 refs.FeedRef
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	HasFeedStub        func(context.Context, refs.FeedRef) bool
	hasFeedMutex       sync.RWMutex
	hasFeedArgsForCall []struct {
		arg1 context.Context
		arg2 refs.FeedRef
	}
	hasFeedReturns struct {
		result1 bool
	}
	hasFeedReturnsOnCall map[int]struct {
		result1 bool
	}
	HasIDStub        func(context.Context, int64) bool
	hasIDMutex       sync.RWMutex
	hasIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	hasIDReturns struct {
		result1 bool
	}
	hasIDReturnsOnCall map[int]struct {
		result1 bool
	}
	ListStub        func(context.Context) (admindb.ListEntries, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
	}
	listReturns struct {
		result1 admindb.ListEntries
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 admindb.ListEntries
		result2 error
	}
	RemoveFeedStub        func(context.Context, refs.FeedRef) error
	removeFeedMutex       sync.RWMutex
	removeFeedArgsForCall []struct {
		arg1 context.Context
		arg2 refs.FeedRef
	}
	removeFeedReturns struct {
		result1 error
	}
	removeFeedReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveIDStub        func(context.Context, int64) error
	removeIDMutex       sync.RWMutex
	removeIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	removeIDReturns struct {
		result1 error
	}
	removeIDReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAllowListService) Add(arg1 context.Context, arg2 refs.FeedRef) error {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 context.Context
		arg2 refs.FeedRef
	}{arg1, arg2})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1, arg2})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAllowListService) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeAllowListService) AddCalls(stub func(context.Context, refs.FeedRef) error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeAllowListService) AddArgsForCall(i int) (context.Context, refs.FeedRef) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAllowListService) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAllowListService) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAllowListService) HasFeed(arg1 context.Context, arg2 refs.FeedRef) bool {
	fake.hasFeedMutex.Lock()
	ret, specificReturn := fake.hasFeedReturnsOnCall[len(fake.hasFeedArgsForCall)]
	fake.hasFeedArgsForCall = append(fake.hasFeedArgsForCall, struct {
		arg1 context.Context
		arg2 refs.FeedRef
	}{arg1, arg2})
	stub := fake.HasFeedStub
	fakeReturns := fake.hasFeedReturns
	fake.recordInvocation("HasFeed", []interface{}{arg1, arg2})
	fake.hasFeedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAllowListService) HasFeedCallCount() int {
	fake.hasFeedMutex.RLock()
	defer fake.hasFeedMutex.RUnlock()
	return len(fake.hasFeedArgsForCall)
}

func (fake *FakeAllowListService) HasFeedCalls(stub func(context.Context, refs.FeedRef) bool) {
	fake.hasFeedMutex.Lock()
	defer fake.hasFeedMutex.Unlock()
	fake.HasFeedStub = stub
}

func (fake *FakeAllowListService) HasFeedArgsForCall(i int) (context.Context, refs.FeedRef) {
	fake.hasFeedMutex.RLock()
	defer fake.hasFeedMutex.RUnlock()
	argsForCall := fake.hasFeedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAllowListService) HasFeedReturns(result1 bool) {
	fake.hasFeedMutex.Lock()
	defer fake.hasFeedMutex.Unlock()
	fake.HasFeedStub = nil
	fake.hasFeedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeAllowListService) HasFeedReturnsOnCall(i int, result1 bool) {
	fake.hasFeedMutex.Lock()
	defer fake.hasFeedMutex.Unlock()
	fake.HasFeedStub = nil
	if fake.hasFeedReturnsOnCall == nil {
		fake.hasFeedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasFeedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeAllowListService) HasID(arg1 context.Context, arg2 int64) bool {
	fake.hasIDMutex.Lock()
	ret, specificReturn := fake.hasIDReturnsOnCall[len(fake.hasIDArgsForCall)]
	fake.hasIDArgsForCall = append(fake.hasIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.HasIDStub
	fakeReturns := fake.hasIDReturns
	fake.recordInvocation("HasID", []interface{}{arg1, arg2})
	fake.hasIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAllowListService) HasIDCallCount() int {
	fake.hasIDMutex.RLock()
	defer fake.hasIDMutex.RUnlock()
	return len(fake.hasIDArgsForCall)
}

func (fake *FakeAllowListService) HasIDCalls(stub func(context.Context, int64) bool) {
	fake.hasIDMutex.Lock()
	defer fake.hasIDMutex.Unlock()
	fake.HasIDStub = stub
}

func (fake *FakeAllowListService) HasIDArgsForCall(i int) (context.Context, int64) {
	fake.hasIDMutex.RLock()
	defer fake.hasIDMutex.RUnlock()
	argsForCall := fake.hasIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAllowListService) HasIDReturns(result1 bool) {
	fake.hasIDMutex.Lock()
	defer fake.hasIDMutex.Unlock()
	fake.HasIDStub = nil
	fake.hasIDReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeAllowListService) HasIDReturnsOnCall(i int, result1 bool) {
	fake.hasIDMutex.Lock()
	defer fake.hasIDMutex.Unlock()
	fake.HasIDStub = nil
	if fake.hasIDReturnsOnCall == nil {
		fake.hasIDReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasIDReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeAllowListService) List(arg1 context.Context) (admindb.ListEntries, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAllowListService) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeAllowListService) ListCalls(stub func(context.Context) (admindb.ListEntries, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeAllowListService) ListArgsForCall(i int) context.Context {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAllowListService) ListReturns(result1 admindb.ListEntries, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 admindb.ListEntries
		result2 error
	}{result1, result2}
}

func (fake *FakeAllowListService) ListReturnsOnCall(i int, result1 admindb.ListEntries, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 admindb.ListEntries
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 admindb.ListEntries
		result2 error
	}{result1, result2}
}

func (fake *FakeAllowListService) RemoveFeed(arg1 context.Context, arg2 refs.FeedRef) error {
	fake.removeFeedMutex.Lock()
	ret, specificReturn := fake.removeFeedReturnsOnCall[len(fake.removeFeedArgsForCall)]
	fake.removeFeedArgsForCall = append(fake.removeFeedArgsForCall, struct {
		arg1 context.Context
		arg2 refs.FeedRef
	}{arg1, arg2})
	stub := fake.RemoveFeedStub
	fakeReturns := fake.removeFeedReturns
	fake.recordInvocation("RemoveFeed", []interface{}{arg1, arg2})
	fake.removeFeedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAllowListService) RemoveFeedCallCount() int {
	fake.removeFeedMutex.RLock()
	defer fake.removeFeedMutex.RUnlock()
	return len(fake.removeFeedArgsForCall)
}

func (fake *FakeAllowListService) RemoveFeedCalls(stub func(context.Context, refs.FeedRef) error) {
	fake.removeFeedMutex.Lock()
	defer fake.removeFeedMutex.Unlock()
	fake.RemoveFeedStub = stub
}

func (fake *FakeAllowListService) RemoveFeedArgsForCall(i int) (context.Context, refs.FeedRef) {
	fake.removeFeedMutex.RLock()
	defer fake.removeFeedMutex.RUnlock()
	argsForCall := fake.removeFeedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAllowListService) RemoveFeedReturns(result1 error) {
	fake.removeFeedMutex.Lock()
	defer fake.removeFeedMutex.Unlock()
	fake.RemoveFeedStub = nil
	fake.removeFeedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAllowListService) RemoveFeedReturnsOnCall(i int, result1 error) {
	fake.removeFeedMutex.Lock()
	defer fake.removeFeedMutex.Unlock()
	fake.RemoveFeedStub = nil
	if fake.removeFeedReturnsOnCall == nil {
		fake.removeFeedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeFeedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAllowListService) RemoveID(arg1 context.Context, arg2 int64) error {
	fake.removeIDMutex.Lock()
	ret, specificReturn := fake.removeIDReturnsOnCall[len(fake.removeIDArgsForCall)]
	fake.removeIDArgsForCall = append(fake.removeIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.RemoveIDStub
	fakeReturns := fake.removeIDReturns
	fake.recordInvocation("RemoveID", []interface{}{arg1, arg2})
	fake.removeIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAllowListService) RemoveIDCallCount() int {
	fake.removeIDMutex.RLock()
	defer fake.removeIDMutex.RUnlock()
	return len(fake.removeIDArgsForCall)
}

func (fake *FakeAllowListService) RemoveIDCalls(stub func(context.Context, int64) error) {
	fake.removeIDMutex.Lock()
	defer fake.removeIDMutex.Unlock()
	fake.RemoveIDStub = stub
}

func (fake *FakeAllowListService) RemoveIDArgsForCall(i int) (context.Context, int64) {
	fake.removeIDMutex.RLock()
	defer fake.removeIDMutex.RUnlock()
	argsForCall := fake.removeIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAllowListService) RemoveIDReturns(result1 error) {
	fake.removeIDMutex.Lock()
	defer fake.removeIDMutex.Unlock()
	fake.RemoveIDStub = nil
	fake.removeIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAllowListService) RemoveIDReturnsOnCall(i int, result1 error) {
	fake.removeIDMutex.Lock()
	defer fake.removeIDMutex.Unlock()
	fake.RemoveIDStub = nil
	if fake.removeIDReturnsOnCall == nil {
		fake.removeIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAllowListService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.hasFeedMutex.RLock()
	defer fake.hasFeedMutex.RUnlock()
	fake.hasIDMutex.RLock()
	defer fake.hasIDMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.removeFeedMutex.RLock()
	defer fake.removeFeedMutex.RUnlock()
	fake.removeIDMutex.RLock()
	defer fake.removeIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAllowListService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ admindb.AllowListService = new(FakeAllowListService)
