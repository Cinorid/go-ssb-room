// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package sqlite

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Migrations statically implements the virtual filesystem provided to vfsgen.
var Migrations = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 12, 9, 56, 58, 584363869, time.UTC),
		},
		"/1-create-auth-fallback.sql": &vfsgen۰CompressedFileInfo{
			name:             "1-create-auth-fallback.sql",
			modTime:          time.Date(2021, 2, 13, 13, 7, 26, 417659788, time.UTC),
			uncompressedSize: 207,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x6c\xce\xb1\xae\x82\x30\x00\x85\xe1\xbd\x4f\x71\xc6\x7b\xa3\x3c\x01\x53\x85\x0e\x44\x28\xd8\xb4\x03\x13\x29\x52\x81\x58\x5a\x02\x25\xf8\xf8\x46\x13\x13\x07\xcf\x7a\xfe\xe1\x8b\x22\x1c\xa6\xb1\x5f\x74\x30\x50\x33\x49\x04\xa3\x92\x41\xd2\x53\xce\xa0\xb7\x30\x34\x37\x6d\x6d\xab\xaf\x77\xfc\x11\x60\xec\x00\x8c\x2e\x98\xde\x2c\xa8\x44\x56\x50\x51\xe3\xcc\x6a\x50\x25\xcb\x8c\x27\x82\x15\x8c\x4b\xf0\x52\x82\xab\x3c\x3f\x12\xc0\xe9\xc9\x20\x98\x47\xc0\x7b\x9f\x0b\x8a\x67\x17\xc5\x5e\xc5\xac\xd7\x75\xf7\x4b\xd7\x0c\x7a\x1d\xd0\x5a\xdf\xc2\xf9\x00\xb7\x59\x0b\x90\xff\x98\x90\x6f\x64\xea\x77\x47\x52\x51\x56\xbf\x90\xf1\x33\x00\x00\xff\xff\x9c\x25\x76\xa7\xcf\x00\x00\x00"),
		},
		"/2-create-allow-list.sql": &vfsgen۰CompressedFileInfo{
			name:             "2-create-allow-list.sql",
			modTime:          time.Date(2021, 2, 13, 13, 6, 27, 378044824, time.UTC),
			uncompressedSize: 166,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x64\xcd\xb1\xae\x82\x30\x14\x06\xe0\xfd\x3c\xc5\x3f\xde\x1b\xe5\x09\x98\x2a\x9c\xa1\xb1\xb4\xd8\xb4\x03\x13\xc1\xd8\x90\xc6\x0a\x04\x6b\xd0\xb7\x77\x33\x26\xce\xdf\xf0\x15\x05\x76\xb7\x38\xae\x43\x0e\xf0\x0b\x55\x96\x85\x63\x38\x71\x50\x8c\x21\xa5\x79\xeb\x53\xbc\x67\xfc\x11\x10\x2f\x00\xe2\x94\xc3\x18\x56\xb4\x56\x36\xc2\x76\x38\x72\x07\xe1\x9d\x91\xba\xb2\xdc\xb0\x76\xd0\xc6\x41\x7b\xa5\xf6\x04\x2c\x8f\x73\x7f\x0d\x2f\xe4\xf0\xcc\x1f\x80\xd7\xf2\xe4\x99\xfe\x4b\xa2\xef\xbe\x9e\xb7\x89\x6a\x6b\xda\x9f\xbe\x7c\x07\x00\x00\xff\xff\x61\x54\x23\xd1\xa6\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/1-create-auth-fallback.sql"].(os.FileInfo),
		fs["/2-create-allow-list.sql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
