// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Defaults statically implements the virtual filesystem provided to vfsgen.
var Defaults = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 11, 15, 43, 30, 498222603, time.UTC),
		},
		"/active.en.toml": &vfsgen۰CompressedFileInfo{
			name:             "active.en.toml",
			modTime:          time.Date(2021, 2, 15, 10, 58, 38, 310605935, time.UTC),
			uncompressedSize: 1053,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x7c\x53\xdb\x6a\xdc\x30\x10\x7d\xd7\x57\x0c\x7e\x49\x0b\xad\xff\x20\x94\x90\x34\xd0\xb2\x24\x65\x1b\x28\x25\xf4\x41\x6b\xcd\x5a\xa2\xb2\xc6\x1d\x8d\xd6\x98\x90\x7f\x2f\x92\x2f\x7b\x21\xe4\x69\xe5\x33\x67\xce\x9c\xb9\xec\x2d\x85\xbd\xe3\x0e\xae\xa1\x9a\x9f\x95\xfa\xa1\x5b\x7c\x20\xb9\xa7\x14\x4c\x0e\x3c\x59\x04\xc6\x7f\x09\xa3\xa0\x81\x5e\xb7\x08\x83\x8e\x10\x48\x60\x9f\x39\x75\xa5\xd4\x46\x07\xe3\x42\xfb\xe4\xc4\x63\xce\x21\xab\x1d\x74\x23\x30\x51\x57\x2d\xd1\x5f\xe8\x1b\xea\x4a\x7c\x46\x60\x98\x21\x8b\x8c\x95\x52\x0f\x38\xc4\x13\x56\xa4\x4f\x30\x58\x2d\x60\x75\xdf\x63\x30\xf0\x81\xb1\xc1\x20\x7e\xfc\x58\x15\xee\x5a\x2f\x7f\x4c\xd0\xe3\x01\xf9\xe0\x70\x58\x50\xf8\x0c\x0b\x54\x29\x75\x93\xc4\xde\x6b\xef\x77\xba\xf9\x7b\x52\xe8\x37\x25\x60\xd4\xde\x8f\x10\x2d\x25\x6f\xc2\x95\xc0\x6e\xb2\x55\xd7\x75\x0d\x1b\x94\xab\x08\x2d\x0a\x8c\x94\x40\x2c\x53\x6a\x2d\x88\x75\xb1\xae\xce\x44\x57\x47\x79\x6a\xbd\xd7\x0d\x02\xed\xc1\xeb\x28\xc0\x18\x89\x65\xa2\xff\x74\x6d\xf8\x16\x32\x2f\xbf\xc0\x85\x23\xfc\x98\x64\xc5\x29\x49\x36\x6d\x3a\x17\xee\x74\xb4\x3b\xd2\x6c\x4e\x6c\x2f\x4f\xa1\x6c\x8b\xc1\x2c\x9c\xea\x22\x67\x75\xb5\x25\xea\xa0\xc4\xe0\xee\x82\x7c\xe3\x3d\x0d\x1b\x17\xe5\xc6\x94\xb5\xe7\x1f\x21\xf0\x2e\xca\x25\x63\x8b\x1d\x1d\x70\x3e\x98\x13\x3f\xdf\x53\x94\x9c\x73\x40\x76\xfb\x11\x24\xaf\x2e\xcf\x08\x5c\x04\xb1\x08\x18\x84\xc7\x32\xc1\x41\x07\x01\x83\x1e\x05\xcd\xbb\xea\x47\xe7\xd3\x7a\xb8\x04\x27\xd5\xaf\x45\x6e\xcf\xd4\x15\xf5\x22\x50\xfc\x7e\xc9\xa7\xa4\x0f\xe7\x33\x98\x7a\x9a\x3b\x9f\x1b\x57\xea\x39\x57\xbc\xa5\x14\xe4\x8f\x32\x18\x1b\x76\xbd\x38\x2a\x9b\x69\x31\x20\xbb\x66\x9e\x00\x85\x65\xad\x8c\xb9\x9f\xfc\xed\x04\x3b\xa0\x50\xaa\x6f\x26\x96\x58\x64\xb8\x86\x85\xa8\x19\xe1\xe5\xa5\x2e\x05\x5e\x5f\x4b\x42\x3c\xcf\x50\xcf\xc5\x54\x5e\xcc\xdb\x36\xf2\x21\x85\xd4\xed\x90\xf3\x25\xf5\x48\xbd\x47\x70\x01\xf4\xfc\xe7\x7a\xcb\x58\x8f\x1c\x29\x9f\x55\x29\xb4\x9d\x78\xef\x5b\x3b\x0a\xaf\x29\xff\x03\x00\x00\xff\xff\x94\xbb\x13\x52\x1d\x04\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/active.en.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
