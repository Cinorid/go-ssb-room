// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Defaults statically implements the virtual filesystem provided to vfsgen.
var Defaults = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 15, 13, 43, 55, 575838238, time.UTC),
		},
		"/active.en.toml": &vfsgen۰CompressedFileInfo{
			name:             "active.en.toml",
			modTime:          time.Date(2021, 2, 16, 10, 54, 17, 666210637, time.UTC),
			uncompressedSize: 1196,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x7c\x93\xcf\x6a\xdc\x30\x10\xc6\xef\x7e\x8a\x0f\x5f\xd2\x42\xeb\x37\xc8\x21\x24\x84\xb6\x2c\x49\x49\x03\xa5\x84\x1e\xb4\xd6\xac\x2d\x2a\x6b\x5c\x69\xbc\xee\x12\xf2\xee\x65\xe4\x3f\xd9\x5d\x42\x4e\x96\x46\xdf\xcc\xfc\xa4\xf9\x7c\xcd\x61\xe7\x62\x87\x4b\x94\xf3\xb2\x2c\xbe\x9b\x86\xee\x58\x6e\x79\x08\x56\x0f\x1e\x5b\x42\xa4\xbf\x03\x25\x21\x8b\xde\x34\x84\xd1\x24\x04\x16\xec\x54\x53\x95\x45\xb1\x31\xc1\xba\xd0\x3c\x3a\xf1\xa4\x39\xdc\x1a\x87\xee\x80\xc8\xdc\x95\xcb\xe9\x4f\xf2\x35\x77\xf9\x7c\x8e\x60\x9c\x43\x2d\x45\x2a\x8b\xe2\x8e\xc6\x74\xa4\x4a\xfc\x09\x63\x6b\x04\xad\xe9\x7b\x0a\x16\x1f\x22\xd5\x14\xc4\x1f\x3e\x96\x59\xbb\xf6\xd3\xcd\x14\xba\xdf\x53\xdc\x3b\x1a\x97\x28\x3e\x63\x09\x95\x45\x71\x35\x48\x7b\x6b\xbc\xdf\x9a\xfa\xcf\x51\xa3\x5f\x3c\x20\x92\xf1\xfe\x80\xd4\xf2\xe0\x6d\xb8\x10\x6c\x27\xac\xaa\xaa\x2a\x6c\x48\x2e\x12\x1a\x12\x1c\x78\x80\xb4\x91\x87\xa6\x85\xb4\x2e\x55\xe5\x49\xd1\x95\x48\x5f\xad\xf7\xa6\x26\xf0\x0e\xde\x24\x41\xa4\xc4\x51\x26\xf9\x0f\xd7\x84\xaf\x41\x75\xba\x82\x0b\xaf\xe1\xfb\x41\xd6\x38\x0f\xa2\xd0\xb6\x73\xe1\xc6\xa4\x76\xcb\x26\xda\x23\xec\x65\x29\xac\x58\x11\x76\xd1\x94\x67\x39\x2b\xd5\x03\x73\x87\x7c\x86\x9b\x57\xf1\xa4\xbe\xf2\x9e\xc7\x8d\x4b\xb2\xaa\x75\xa3\xf8\x3a\x45\x74\xd4\x6d\x29\xa6\xf2\x4c\x7c\x84\xf3\x85\x22\xe5\xf7\xa9\x4d\x40\x22\x82\xf1\x1e\xd2\xd2\x92\xaa\xa5\x74\x9b\xcb\x99\x60\x31\x9a\x43\x52\x78\x63\x2d\x02\x8d\xe0\x40\x09\x1c\x11\xa9\xe3\x3d\x81\xfe\xb9\xa4\x26\xd1\x70\x75\xde\xf7\xca\x66\x73\xea\x67\x2a\x7f\x2e\x78\xc8\x45\x66\x57\x1f\x51\x7e\x1b\x92\x68\xd3\x3d\x45\xb7\x3b\x40\xd4\x5f\x3a\x48\xb8\x74\x04\x9b\xef\x31\x9a\x20\x33\x8c\x7d\xb7\xfc\xfa\x62\xcb\xff\x34\x17\xc9\xb9\xc6\xab\xb3\xcd\xfe\x74\x24\x13\xfc\x3c\x88\x65\x0e\xc5\x93\x96\xbe\xe6\x21\xc8\xef\xc2\x52\xaa\xa3\xeb\xc5\x71\x36\x4a\x43\x81\xa2\xab\xe1\x5d\x92\xb2\xe0\xb0\xb8\x2c\x92\x92\xeb\xde\x09\x75\xe0\x90\x6f\xb1\x99\x54\xd2\x52\xc4\x25\x16\xa1\x89\x84\xe7\xe7\x2a\x37\x78\x79\xc9\x09\xe9\x34\xa3\x78\xca\x50\xea\x93\xb7\x31\xd4\xd7\x61\xc8\xb7\xe3\x1d\x7a\xe2\xde\x13\x5c\x80\x99\xff\xf5\xb7\xc0\x7a\x8a\x89\xd5\xe5\xb9\xd1\xc3\xa4\x7b\x1f\xed\xb5\xf0\x9a\xf2\x3f\x00\x00\xff\xff\x62\xa7\x69\x7b\xac\x04\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/active.en.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
