// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Defaults statically implements the virtual filesystem provided to vfsgen.
var Defaults = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 10, 16, 34, 42, 221227039, time.UTC),
		},
		"/active.en.toml": &vfsgen۰CompressedFileInfo{
			name:             "active.en.toml",
			modTime:          time.Date(2021, 2, 10, 18, 40, 14, 673088856, time.UTC),
			uncompressedSize: 636,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x5c\x92\xdf\xaa\xdb\x30\x0c\xc6\xef\xf3\x14\x1f\xb9\xe9\x06\x5b\xde\xa0\x17\x63\x65\x30\x28\x2d\x74\x85\x31\xc6\x2e\x9c\x44\x8b\xcd\x71\xac\x60\xcb\x0d\xa1\xf4\xdd\x0f\xce\xbf\xa6\xe7\x4e\xfa\xf4\x93\xf4\xc9\xf8\xa8\x5c\x6d\x5c\x73\x35\x62\x09\x7b\xe4\xac\x95\x41\x3b\xc0\x33\xb7\x79\x36\x57\x7f\x93\xad\xb8\x1d\xeb\xb3\x82\x7e\x96\x34\x79\xca\xb3\x13\xf5\x61\x03\x05\xfe\x82\x5e\x2b\x81\x56\x5d\x47\xae\xc6\x27\x4f\x15\x39\xb1\xc3\xe7\x89\x5d\xd7\xa5\x64\x92\xce\x37\xf2\x37\x43\xfd\xa2\xe2\x2b\x16\x29\xcf\xbe\x45\xd1\x3f\x94\xb5\xa5\xaa\xde\x36\x7b\xfe\x70\x84\x27\x65\xed\x80\xa0\x39\xda\xda\xed\x04\xe5\x64\xaa\x28\x8a\x02\x47\x92\x5d\x40\x43\x82\x81\x23\x44\x7b\x8e\x8d\x86\x68\x13\x8a\xd7\xa1\xab\xa1\xab\x26\x74\x56\x55\x04\xfe\x0f\xab\x82\xc0\x53\x60\x2f\x13\xfe\xcb\x34\xee\xa7\x4b\x5c\x8a\x60\xdc\x53\x3e\x47\x59\x75\x8e\x89\xaf\x5b\xe3\x0e\x2a\xe8\x92\x95\xaf\x37\xae\x97\x50\x38\xb9\xf2\xa8\x17\xe6\x63\xcf\x6a\xea\xc2\xdc\x62\xac\xe1\xf0\x84\xb3\x93\xba\xbd\x36\x24\x76\xc5\x16\x2a\xfb\x3b\x4a\x69\xc6\x77\x8e\x4e\xfe\x65\x35\x85\xca\x9b\x4e\x0c\xbb\xe5\x64\x17\xdb\x92\x7c\xba\xb9\x23\xee\x2c\xc1\x38\xa8\xf9\x13\xb0\x5b\x5e\xc6\xc3\x04\xa4\xb4\x23\x1f\x38\xdd\x0f\xd1\x84\xcb\x84\x49\x02\xf6\x98\x48\x82\xf2\x84\xfb\xbd\x18\x77\x3e\x1e\x9b\xb9\x6b\xcb\x7b\x00\x00\x00\xff\xff\x4b\x47\xdc\x45\x7c\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/active.en.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
