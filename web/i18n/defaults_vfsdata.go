// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Defaults statically implements the virtual filesystem provided to vfsgen.
var Defaults = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 10, 16, 34, 42, 221227039, time.UTC),
		},
		"/active.en.toml": &vfsgen۰CompressedFileInfo{
			name:             "active.en.toml",
			modTime:          time.Date(2021, 2, 10, 18, 20, 44, 393607246, time.UTC),
			uncompressedSize: 591,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x5c\x91\xcd\x6a\xe3\x30\x14\x85\xf7\x7e\x8a\x83\x37\x99\x81\x19\xbf\x41\x16\xc3\x84\x42\x21\x34\x90\x06\x4a\x29\x5d\xc8\xf6\xad\x25\x2a\xeb\x1a\xe9\x2a\xc6\x84\xbc\x7b\x51\xfc\x13\xb7\x3b\xe9\xd3\x27\xdd\x73\xd0\x5e\xb9\xda\xb8\xe6\x64\xc4\x12\xb6\xc8\x59\x2b\x83\x76\x80\x67\x6e\xf3\x6c\x3a\x7d\x21\x5b\x71\x7b\x3b\x9f\x08\xfa\x09\x69\xf2\x94\x67\x4f\xd4\x87\x95\x14\xf8\x0f\x7a\xad\x04\x5a\x75\x1d\xb9\x1a\xbf\x3c\x55\xe4\xc4\x0e\xbf\x47\x77\x19\x97\x36\x23\x3a\x9c\xc9\x9f\x0d\xf5\x33\xc5\x5f\xcc\x28\xcf\xfe\x45\xd1\x0f\xca\xda\x52\x55\x9f\xab\x39\xaf\x1c\xe1\x49\x59\x3b\x20\x68\x8e\xb6\x76\x1b\x41\x39\x86\x2a\x8a\xa2\xc0\x9e\x64\x13\xd0\x90\x60\xe0\x08\xd1\x9e\x63\xa3\x21\xda\x84\xe2\xfb\xa3\x4b\xa0\x93\x26\x74\x56\x55\x04\xfe\x80\x55\x41\xe0\x29\xb0\x97\x51\x7f\x36\x8d\x7b\x74\xc9\x4b\x2b\x18\x77\xc7\x87\x28\x0b\xe7\x98\xfc\xba\x35\x6e\xa7\x82\x2e\x59\xf9\x7a\x95\x7a\x5e\x0a\xa7\x54\x1e\xf5\xec\xfc\xbc\xb3\x84\x3a\x32\xb7\xd8\xdd\xb5\xec\xed\x26\x26\xfc\x9f\xa3\x93\xf7\xac\xa6\x50\x79\xd3\x89\x61\x37\xb7\x70\xb1\x2d\xc9\xa7\x1a\x1d\x71\x67\x09\xc6\x41\x4d\xff\xca\x6e\x2e\xeb\x61\x02\xd2\xb6\x23\x1f\x38\x55\x82\x68\xc2\x71\xd4\x24\x09\x5b\x8c\x26\x41\x79\xc2\xe5\x52\xdc\x66\x5e\xaf\xab\x77\x97\x2b\x5f\x01\x00\x00\xff\xff\x18\xb8\x47\x4c\x4f\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/active.en.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
