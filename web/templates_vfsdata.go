// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 4, 10, 45, 12, 806640021, time.UTC),
		},
		"/admin": &vfsgen۰DirInfo{
			name:    "admin",
			modTime: time.Date(2021, 2, 4, 10, 13, 43, 85528679, time.UTC),
		},
		"/auth": &vfsgen۰DirInfo{
			name:    "auth",
			modTime: time.Date(2021, 2, 4, 10, 13, 35, 952659459, time.UTC),
		},
		"/base.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "base.tmpl",
			modTime:          time.Date(2021, 2, 4, 13, 5, 58, 177632333, time.UTC),
			uncompressedSize: 282,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x54\x90\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\xc5\x9c\x7b\x9f\x5b\x0a\x5f\x0a\x7e\x44\x09\x22\x34\x94\x1b\x7b\xd1\x45\xd8\xf1\xc9\x59\x22\x50\xe4\x77\x47\x76\x0e\x24\x2a\xcb\x9a\xfd\xe6\x5b\xad\x3d\xdc\x3f\xdd\xbd\xbe\x3d\x3f\xe0\x2c\x31\xf4\x9d\xfd\x7d\x98\x7c\xdf\x01\xf6\xa0\x35\x5c\x8a\x97\xc0\xc2\x18\x69\x61\x08\xc7\x4b\x20\x61\x68\xdd\x26\x22\x0b\xc1\x9d\x29\x2f\x2c\x27\xf5\x29\xef\xfa\x46\xc1\xb4\x48\x26\x09\xdc\x6f\xdb\x18\x92\xfb\x80\x6a\x5f\x85\x63\x29\x8f\x49\x0f\xc3\x2d\x5e\x52\x8a\x18\x38\xaf\x9c\xb7\x8d\x67\x5f\x8a\x35\x3b\xd3\x59\xb3\xaf\x60\xc7\xe4\xbf\x6b\xd9\x5f\x0b\x7f\x49\xa6\xd6\x72\x65\xaa\xc9\x4f\x2b\x5c\xa0\x65\x39\x29\x97\x66\xa1\x69\xe6\xac\x2a\x56\x41\x5c\xc9\x9a\xf0\x2c\x0a\x47\xfc\x83\x8d\x9f\xd6\x6a\xdc\x55\xd6\xb4\x1b\xfc\x04\x00\x00\xff\xff\xdb\xd4\x7e\xcf\x1a\x01\x00\x00"),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2021, 2, 4, 10, 24, 43, 562315500, time.UTC),
			uncompressedSize: 369,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x5c\xd0\xc1\x4e\xc4\x20\x10\x06\xe0\x7b\x9f\x62\x82\x17\x3d\xb0\x4d\x3d\x1a\xca\x61\xcd\x3e\x81\x4f\x30\x85\x59\x8b\xdb\x42\x33\x60\x4d\x43\x78\x77\xe3\xb2\xcd\xaa\xa7\x49\x7e\xe0\xfb\xc9\xe4\x6c\xe9\xec\x3c\x81\x48\x2e\x4d\x24\x4a\x61\xf2\x96\x18\x24\x9c\x98\x03\x43\xce\x87\xb7\x84\xe9\x33\xbe\x06\x4b\xa5\xe4\x4c\xde\x96\xd2\xdc\xdf\x99\xe0\x13\xf9\x24\x4a\x69\x94\x75\x2b\x98\x09\x63\xec\xc5\x82\xef\x24\x47\x42\x4b\x2c\x74\x03\xa0\xc6\x4e\x57\xf1\xe1\x1f\xa9\xe2\x8c\xd3\xa4\x41\xde\xbb\x4a\x51\x6d\x4d\x55\x3b\x76\xba\x51\xad\x75\xab\xfe\xe3\x73\xf8\xaa\xee\xaf\xcc\x84\x49\xc6\x59\x76\xcf\xd7\x13\x00\xb5\x30\x81\xb3\xbd\x20\xe6\x63\xb0\x9b\xd0\x39\x1f\x4e\xcc\x3f\xfc\xc2\xb4\x5f\xaa\x13\x40\x21\x8c\x4c\xe7\x5e\x7c\xe0\x8a\xd1\xb0\x5b\xd2\xcb\xe8\x62\x0a\xbc\x1d\x06\x34\x97\xc7\x27\xb1\x37\x0d\xc9\xc3\x90\xbc\x5c\xd8\xcd\xc8\x9b\xd0\x47\x34\x17\xd5\xe2\x8d\x6c\xaf\xe6\xfe\xeb\x3a\x6e\x9b\xfb\x0e\x00\x00\xff\xff\x6b\x12\x36\x5b\x71\x01\x00\x00"),
		},
		"/landing": &vfsgen۰DirInfo{
			name:    "landing",
			modTime: time.Date(2021, 2, 4, 10, 30, 18, 864142917, time.UTC),
		},
		"/landing/about.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "about.tmpl",
			modTime:          time.Date(2021, 2, 4, 13, 6, 7, 889443270, time.UTC),
			uncompressedSize: 155,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x4c\xcc\xb1\xaa\xc3\x30\x0c\x85\xe1\xdd\x4f\x71\xae\x77\x11\xb2\xfb\x1a\xba\x77\xec\x0b\xb8\x91\x1a\x1b\x82\x52\x12\x37\x1d\x84\xde\xbd\x64\x28\x74\x3a\xc3\xf9\xf8\xcd\xc0\xf2\x68\x2a\x88\xbd\xf5\x45\x22\xdc\xaf\x45\xb9\xe9\x0c\xc2\xe5\xbe\xbe\xba\x19\x44\x19\xee\xe1\x07\x4f\xab\x76\xd1\x7e\xf2\x90\xb8\x1d\x98\x96\xb2\xef\xff\xf1\x59\x66\xa1\x2a\x85\x65\x8b\x39\x00\xa9\x8e\xf9\x56\x05\xe5\x2c\xe1\x7c\xd3\x50\xc7\x1c\xd2\xc0\xed\xf8\x0e\xd2\x1f\x11\x86\x6d\x7d\x83\x28\x07\x33\x51\x76\xff\x04\x00\x00\xff\xff\xeb\xd0\x45\x14\x9b\x00\x00\x00"),
		},
		"/landing/index.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "index.tmpl",
			modTime:          time.Date(2021, 2, 4, 16, 33, 54, 923639610, time.UTC),
			uncompressedSize: 3955,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x9c\x57\x5b\x6f\x5c\x37\x0e\x7e\xf7\xaf\xe0\xfa\xb9\x96\xd1\x77\xd7\x80\xb1\x9d\xa2\x01\x52\x77\xb7\x4e\xf2\xae\x91\x38\x67\xb8\xd0\xe5\x58\xa2\xce\x2e\x60\xf8\xbf\x2f\xa8\xdb\x1c\x23\x89\x51\xe4\xa9\xcd\x8c\x46\x22\xbf\x1b\xe9\x97\x17\xb0\x78\xa2\x80\x70\xcd\xc4\x0e\xaf\xe1\xf5\xf5\xa3\x0e\x96\xc2\x02\x37\xf0\x21\x58\xfc\xdf\xcb\x0b\x60\xb0\xf0\xfa\x7a\xb5\x3b\x6c\x62\x60\x0c\x2c\xc7\xaf\xee\x2c\x6d\x60\x9c\xce\xf9\x97\xeb\x55\x2f\x78\x73\x46\x6d\x31\x5d\xdf\x5f\x01\xdc\x9d\x7f\xbe\xaf\xb7\x80\xeb\xb7\xca\x89\xbb\xdb\xf3\xcf\xf7\x57\x57\x77\xe4\x17\xc8\xc9\xfc\x72\x7d\xab\x73\x46\xce\xb7\xe4\x97\x5b\xc6\xcc\x37\x67\x4c\x9e\x50\xad\x61\xb9\x96\x83\xeb\xfd\xc7\x98\xd0\x03\xad\xb9\x78\xb0\xd1\xc5\x04\x99\x18\xb4\x47\xfe\x09\x4c\x0c\x19\x0d\x23\x97\x04\xda\xd2\x4a\xd9\xc8\x4b\xe8\x88\x7f\x82\x8c\x16\x6c\x04\xa4\x92\x7d\xb4\xc0\xe8\xd7\x98\x80\x82\x21\x4b\xb6\x04\x86\xc2\xe0\xf4\x31\x26\x04\xe4\x76\x35\x82\xd7\x4b\xd0\xa0\x1d\x3d\x17\xad\xe0\x09\x2d\x9c\x74\x31\x74\x2c\x19\xb8\xa4\x95\x32\x50\x00\x2c\xe0\x09\x8e\x74\xc4\x60\x8b\x57\xf0\x00\x3a\x99\x02\xa6\xa4\x5c\x32\x6c\xc4\x1a\xa5\xb4\xa5\xc8\x7d\x25\x51\x86\x74\x8e\xc1\x94\x0c\x1a\x03\xea\x00\x1b\xba\x5a\xa4\x82\x07\x79\x09\x79\x5e\x06\x18\xc8\xc3\x49\x1b\x72\x94\x29\xc3\x92\xf4\x46\x56\x43\xc0\xe7\x52\x2f\xdd\xb4\x73\x94\x15\x7c\x6a\xed\xc4\x64\x48\xea\x71\xf1\x18\x13\x53\x06\x74\xe8\x31\x70\xf1\x10\xe8\x78\x06\x46\xe7\x4a\x06\x1f\x1d\x66\x26\x54\xf0\xd4\xc1\x03\xcc\x0c\xab\xd3\x06\x93\xe6\xda\xd4\x82\x99\x75\x86\xf6\x6f\xbf\x62\xb2\x84\x52\xa1\x1c\x7e\x07\x68\xb0\x85\x32\x70\xa2\xcc\xd2\x0a\xe4\xe8\x1c\x19\xe2\x62\x29\xb4\x1a\x06\x5f\x0a\x3e\x3b\x4e\x64\xb0\x82\x48\xda\x14\x47\x19\x42\x09\x46\xb8\x52\xf0\xa7\xa5\xb8\x6b\xbd\x43\x37\x7e\x0d\x5e\xe7\xdc\x39\xd9\x8a\x5b\x0b\x6b\x46\xe1\x61\x77\xa0\xfe\xc0\x44\xef\xa3\x8d\xf0\x2c\x75\xed\x1a\xf9\x1d\x83\x4d\x98\xa8\x73\xdd\xa9\xc6\xa5\x63\xe1\xbe\xab\x33\x05\x8f\x15\xfd\x46\xac\xe8\xa8\x64\x78\x2e\xda\xc3\x8a\xce\x61\x60\xcc\xf2\x75\x40\x03\x41\x7b\x05\xff\x96\x87\x13\x89\x16\xf2\x9b\x62\xa3\x34\x58\x58\xc1\xa7\xaa\x42\xd1\xe0\xe4\xed\x84\x65\x21\xcd\xb0\xd1\xa6\xbd\x28\x85\x41\x97\xa5\xa0\xba\xbb\x5d\xef\xc5\x07\x4f\xe8\x21\x14\xe7\x34\xac\x67\x9d\x90\x93\x06\x4b\xda\x5f\xda\x0f\x94\x5d\x83\xa7\xbe\xe3\x63\x3a\x52\x03\x61\x20\x52\x3f\xef\x12\x94\xca\x2e\x4c\x2a\xf8\x10\x20\xa6\xa0\x13\xb6\xce\x36\xda\x30\x25\xdd\xf4\x95\xf5\x42\xcc\xa2\xba\x83\x10\x5e\x21\x1b\xc2\x34\xc5\x43\x8e\x86\x84\x49\xcd\xf1\xb9\xa0\x82\x87\x62\x38\xa6\xae\xd9\xaf\x50\x53\xf0\xaf\x98\x98\x89\x2b\x07\x39\x6b\x20\xdb\xcf\x36\xdf\x79\xd8\x44\xac\xc7\xe2\x8a\xef\x6d\x1c\x6b\x88\xf0\xb0\x58\x05\x57\xc1\x9f\xad\x60\x87\x86\xcb\x4e\x28\xef\x29\x5b\xc1\x67\x6e\x1e\x1b\x57\x6e\xd1\x15\x5e\xb5\xc8\x07\x0d\x06\x9d\x15\xfc\x86\xa9\x7b\xa8\x22\x86\x65\xb2\xb3\x26\x64\xea\xde\x52\xf0\xc0\x9d\xe6\x81\xd6\xce\x1a\xf2\xd4\x81\xe7\xdb\x4d\x8c\x55\x5c\xb9\xe4\x15\x83\xa5\x9c\x51\xc1\x1f\xe2\x96\x8b\x09\x04\x8a\x8c\xa2\xd9\x7e\x33\x05\x38\x0f\xdd\x0a\xb9\xf5\xab\x51\x4d\x73\x17\x5a\x58\x8b\xdb\x28\xe8\x34\xc5\xf2\x38\xee\xab\x1a\x02\xa7\xcd\xae\xca\xca\x88\x82\xcf\x29\x54\xe8\x27\x00\xed\x94\xd3\x31\xa1\xc8\x29\x06\x81\x5b\x1f\x49\x4c\x3f\xe8\xae\x41\xa7\x4d\xed\xbd\xe3\x5e\xe4\x1e\xdb\x74\xd6\xe3\x69\xf7\x7f\x3d\x80\xc8\x02\x05\xc6\x54\xf3\xf2\x77\x6d\xe0\x2c\x17\x4b\xf8\x0b\x55\x8c\x22\x66\xc3\xc5\x67\xae\x50\x55\x19\xfd\x1d\x49\x0a\x39\xb3\x81\xf8\x26\x40\x14\x3c\x18\x38\xa1\x14\x61\xa3\x98\x13\xfb\x89\x37\xae\xad\x1e\x9a\x37\x0c\xa7\xd4\x3c\x3a\xcc\x28\x95\xd2\x17\x4c\x4d\x38\x5d\xd6\xe3\x27\xda\x00\x4f\x3b\x37\xb1\x77\x06\xa5\x11\xc9\x8e\x1a\x0b\x53\xdb\x19\xbd\x54\xc2\x31\x89\x01\x6a\xb0\x3e\x17\x11\xaa\x85\x35\x26\xd6\x5d\x5b\x7f\x54\x67\x74\xf3\xcc\xb3\x96\x7a\x45\x4e\x1b\x0a\xa4\x9b\xae\x36\x74\x23\xa3\x86\xde\xfa\xf8\xe9\x58\xce\x8f\x6b\xb7\x14\xf6\xf3\x4a\xc1\x5f\x7d\x38\x79\x5d\x11\x1d\xb3\xaa\xf2\x3a\x3c\xdc\xa0\xff\x4f\xc9\x1c\x25\xe0\xb4\x9f\x57\x93\xed\x18\xa2\x6b\x3c\x5d\x26\xd0\x94\xa5\xa8\x65\x02\x56\x4f\x17\x86\x0d\x03\x06\xcd\x3b\x8d\x04\xf0\x28\x8a\xba\x24\x26\x16\x05\xbf\x16\x92\x47\xba\x14\x6a\xe5\x3d\x48\x2b\x96\x6f\x33\xb1\xf9\xbb\xd4\x6f\x06\x6b\x0d\xc4\x5a\x7b\xcb\xae\x96\xfc\xa7\xe9\xf2\x3e\x8a\x14\xfc\xf5\x5e\x68\x1f\xbe\xab\xb4\xdd\xa8\x52\xf0\x05\x1d\x9c\x12\x85\x85\xa4\x2e\xc9\x22\x29\xd0\x9b\x98\x44\x13\xf5\xfd\x56\xf2\xf8\x39\x20\x93\xa4\xe2\x63\x3d\x57\xf5\xd4\xf8\x6e\x75\xaf\x25\x95\x3c\xb7\x90\xe9\xf0\x83\x48\x71\x46\xde\x05\xcb\xca\x5a\x8f\xc9\xfe\x98\x44\x81\x41\x87\xa9\x11\xd6\xc9\xbc\xf0\x5e\xf3\x72\xef\x89\x3a\xd6\xf7\x55\x5b\x5a\x02\xe5\x4c\xbe\x9a\x72\xaf\xe4\x4b\xa7\x85\x7b\x56\x5f\xdc\xd0\xc2\xe7\xe2\xfb\xb9\x7b\xbc\xb3\x4e\x28\xf8\xf0\x03\x91\x24\xe8\x05\xd3\x2a\xfb\x91\x6d\xea\x90\xe2\x48\x09\x6d\x1a\xbb\xbc\x5b\xb0\xac\x5e\xeb\x0a\x58\xbe\xde\x5f\x04\x91\xd6\xdf\x9b\xae\x1c\x1d\x31\x45\xd1\xed\xdc\x1f\xdb\x7c\x3e\x64\x61\xab\x8f\xd1\xe6\xc9\xef\xea\x5b\xc1\xd3\x8e\xb7\x16\x65\x73\xa1\x81\x35\x45\x0a\x3b\x15\x3b\x8c\xd5\x84\xb5\xe2\x1e\x25\x31\x28\x78\x14\x8d\xf5\x60\x2a\xd9\xd0\x4a\x3c\xd7\xc2\xa6\xdb\xbe\x49\x5c\x06\xe0\x23\x65\x37\x67\xdd\xa9\x64\x53\x6d\xde\xca\x2e\x33\xbb\xc6\x81\x21\xa8\x21\xcd\x2f\x3a\x51\xdd\x39\x45\x0d\x2d\x32\x85\x9c\x29\x61\x49\x03\xdd\x56\x84\x96\x31\xf2\x2d\xd9\x99\x47\x5f\xbe\xa1\xfb\x01\xcf\x9b\xe1\xf9\x99\xc7\xc7\xef\xad\x00\x0a\x3e\x36\x32\x5a\x02\x0c\x31\x5d\xb6\xbb\xa7\xaf\xcd\x31\x90\xa1\xef\xab\xbd\x5a\x41\xde\xd1\x81\x45\xe4\x3d\xb7\x3f\xb5\xbf\x12\x06\xb9\x73\x72\x88\x15\xbb\x3c\x05\xdf\xe3\x19\x4c\xd2\x79\x46\xe4\x08\xdf\xb9\x08\xf4\xf5\x44\xc1\x6f\x7f\xdf\x61\x43\x58\x85\xea\x5f\x3c\x14\x64\x8c\x38\xcc\x45\x5b\x89\x1b\x8f\xb9\xa6\xcb\xdb\x0a\xe5\xb1\xbe\x9d\x55\x36\x44\x59\x33\x4c\x0f\xdf\x5e\x7d\xda\x26\x23\xb7\x57\x94\xa6\x2d\x50\x6c\x44\x61\xe4\x4f\x7f\xa9\x2f\xee\x87\xf7\x53\x59\xc1\xaf\x23\x65\xf6\x2c\xd7\x05\xee\x82\xb2\x82\x0f\xd3\x00\x2d\x46\xfd\xec\xf0\xab\x0c\xab\x0a\x99\x0a\x9a\x50\xe3\x3b\x73\x5d\xc1\x3f\xe7\x44\xee\x63\x7c\x48\x42\x86\xb8\xfb\x86\x92\xba\xee\x6f\x2d\x6d\xe3\x3f\x70\xf7\x8f\x9b\x1b\xb8\x4d\xf1\xbf\x70\x73\x73\x7f\xf5\xf2\x82\xc1\xbe\xbe\xfe\x3f\x00\x00\xff\xff\xc8\x2d\x64\x17\x73\x0f\x00\x00"),
		},
		"/news": &vfsgen۰DirInfo{
			name:    "news",
			modTime: time.Date(2021, 2, 4, 10, 13, 52, 723352114, time.UTC),
		},
		"/news/overview.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "overview.tmpl",
			modTime:          time.Date(2021, 2, 4, 15, 10, 54, 533961494, time.UTC),
			uncompressedSize: 408,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x54\x90\x41\x8b\xfb\x20\x14\xc4\xef\x7e\x8a\xf7\x7f\xf4\xf8\xb7\x25\x3d\x2d\xc5\x08\x0b\x7b\xd9\x4b\x77\x0f\x85\x3d\x4b\x7c\x6d\x04\xa3\x41\xdd\xa4\xf0\xf0\xbb\x2f\x29\x29\x34\x27\x65\x66\xf8\xcd\x28\x33\x58\xba\xba\x40\x80\xc5\x15\x4f\x08\xb5\xaa\xc7\x4d\x33\xbb\xe6\x2d\x00\x9e\x69\xce\x5f\x13\xa5\xc9\xd1\x8c\xb5\xaa\xc3\xd3\x06\x0a\x16\x6a\x15\x2f\x8c\x2e\x86\x42\xa1\x2c\x14\xa1\xac\x9b\xa0\xf3\x26\xe7\x16\x47\x73\x23\xd9\x93\xb1\x94\x50\x0b\x00\xd5\x37\xe0\x6c\x8b\x33\xf9\x2e\x0e\x84\x9b\xb2\x9f\x55\x5c\xba\xfa\x46\x0b\x75\xb0\x6e\xd2\x1b\x5e\x8a\x33\x6e\x95\x2e\x7a\x39\x58\xd9\x1c\x51\x0b\xe6\x64\xc2\x8d\x60\xe7\x82\xa5\xfb\x7f\xd8\x91\xa7\x81\x42\x81\x53\x0b\xfb\x77\xef\xbf\x63\x2e\xb9\x56\x21\x84\x32\xd0\x27\xba\xb6\xc8\xfc\x9b\xfc\x25\x02\x06\x9a\xf3\x69\x8c\xb9\x20\xe0\x92\xfb\xfc\xc0\x95\x53\xeb\x3a\xfd\xa8\x99\x9f\xc8\xfd\xd9\x0c\xf4\x18\x7a\x5c\x86\x1a\x2d\x84\x1a\x5f\xfd\x0b\xdd\xcb\xe2\x8f\x5a\x08\x66\x0a\x76\xf9\x99\xf5\x41\x8f\x03\xd4\x3f\x29\xe1\x90\xe2\x0c\x52\xea\x67\xe6\x2f\x00\x00\xff\xff\x0e\x86\xb8\x99\x98\x01\x00\x00"),
		},
		"/news/post.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "post.tmpl",
			modTime:          time.Date(2021, 2, 4, 16, 10, 49, 12065149, time.UTC),
			uncompressedSize: 388,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x74\xce\xb1\x6e\x84\x30\x0c\x80\xe1\x9d\xa7\x70\x3d\xb5\x43\x40\x74\xaa\x4e\x21\xd3\x2d\xb7\xd0\x0e\xbc\x40\x44\x7c\x25\x12\x97\xa0\x24\x05\xa4\xc8\xef\x5e\x41\xdb\x6b\x19\x3a\x25\xfa\x65\x7f\x72\xce\x60\xe8\x6a\x1d\x01\x26\x9b\x46\x42\x60\xce\xd9\xd6\x2f\x0e\xb0\xa5\x25\x76\x7b\x64\x3e\x41\xce\xe5\x9b\x8f\xa9\x6c\xf5\x8d\xb6\x19\x20\x67\x80\xb9\xf8\x23\xf4\xde\x25\x72\x69\x33\x0a\x69\xec\x0c\xfd\xa8\x63\x6c\x70\xd2\xef\x24\x06\xd2\x86\x02\xaa\x02\x40\x0e\xb5\x3a\x72\xb2\x1a\x6a\x55\xc8\xca\xd8\x59\x1d\x56\x83\x5f\xf0\x58\x7a\x3f\x8a\x9b\x11\xf5\xf3\xd6\xa7\xbb\xd3\xd1\x9a\x36\x67\xfa\x65\xf6\x07\xe4\x83\x10\x50\x05\xbf\x80\x10\xaa\x90\x1a\x86\x40\xd7\x06\x73\xfe\x08\x63\xe7\x01\x1d\x2d\xf1\xe4\x67\x0a\xb3\xa5\x05\x99\x11\xac\x69\xf0\x1e\xd4\xeb\xf7\x4f\x56\xfa\xdf\xf5\xc9\xc7\x84\x80\xdb\x21\x97\x33\xc2\xa3\x75\x3d\x7c\x9d\x75\x39\x3f\xfd\x90\x8e\xd6\x84\xaa\xa5\x35\x95\x65\xb9\x6b\x39\x93\x33\xcc\x9f\x01\x00\x00\xff\xff\xc9\x34\x6e\xa1\x84\x01\x00\x00"),
		},
		"/testing": &vfsgen۰DirInfo{
			name:    "testing",
			modTime: time.Date(2021, 2, 4, 10, 45, 49, 325927577, time.UTC),
		},
		"/testing/base.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "base.tmpl",
			modTime:          time.Date(2021, 2, 4, 10, 45, 50, 591902911, time.UTC),
			uncompressedSize: 243,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x54\x8f\xb1\xae\x83\x30\x0c\x45\x77\xbe\xc2\x2f\xfb\x23\x6b\x87\xc0\x52\x3a\xb7\x03\x4b\xc7\x90\x18\x11\x35\x04\x09\x0c\x6a\x15\xe5\xdf\x2b\x07\x5a\xa9\x53\x14\x5f\x9f\x73\x65\xf5\xd7\x5c\xcf\xed\xfd\x76\x81\x81\x46\x5f\x17\xea\xf3\xa0\xb6\x75\x01\xa0\x46\x24\x0d\x66\xd0\xf3\x82\x54\x89\x95\xfa\xff\x93\x00\x99\x23\x72\xe4\xb1\x8e\xb1\xf3\x93\x79\x80\xc8\x5f\x01\x65\x4a\x0d\xf6\x7a\xf5\x04\x2d\x4f\x62\xc4\x60\x53\x52\x72\x5f\x2f\x94\xdc\xdd\xaa\x9b\xec\x8b\x3d\x5f\x01\x3e\x69\xd6\x59\x70\x30\x5c\x62\xdd\x06\xc6\xeb\x65\xa9\x84\x99\x02\x69\x17\x70\x16\x8c\x31\x08\x07\xc9\x09\x06\x12\x50\xc2\x0f\x2c\xad\xdb\xb8\x71\xaf\x52\x32\x1f\xf7\x0e\x00\x00\xff\xff\xd6\x0a\x65\x40\xf3\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/admin"].(os.FileInfo),
		fs["/auth"].(os.FileInfo),
		fs["/base.tmpl"].(os.FileInfo),
		fs["/error.tmpl"].(os.FileInfo),
		fs["/landing"].(os.FileInfo),
		fs["/news"].(os.FileInfo),
		fs["/testing"].(os.FileInfo),
	}
	fs["/landing"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/landing/about.tmpl"].(os.FileInfo),
		fs["/landing/index.tmpl"].(os.FileInfo),
	}
	fs["/news"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/news/overview.tmpl"].(os.FileInfo),
		fs["/news/post.tmpl"].(os.FileInfo),
	}
	fs["/testing"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/testing/base.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
