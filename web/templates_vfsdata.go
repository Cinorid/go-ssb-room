// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 4, 10, 45, 12, 806640021, time.UTC),
		},
		"/admin": &vfsgen۰DirInfo{
			name:    "admin",
			modTime: time.Date(2021, 2, 4, 10, 13, 43, 85528679, time.UTC),
		},
		"/auth": &vfsgen۰DirInfo{
			name:    "auth",
			modTime: time.Date(2021, 2, 4, 10, 13, 35, 952659459, time.UTC),
		},
		"/base.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "base.tmpl",
			modTime:          time.Date(2021, 2, 4, 13, 5, 58, 177632333, time.UTC),
			uncompressedSize: 282,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x54\x90\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\xc5\x9c\x7b\x9f\x5b\x0a\x5f\x0a\x7e\x44\x09\x22\x34\x94\x1b\x7b\xd1\x45\xd8\xf1\xc9\x59\x22\x50\xe4\x77\x47\x76\x0e\x24\x2a\xcb\x9a\xfd\xe6\x5b\xad\x3d\xdc\x3f\xdd\xbd\xbe\x3d\x3f\xe0\x2c\x31\xf4\x9d\xfd\x7d\x98\x7c\xdf\x01\xf6\xa0\x35\x5c\x8a\x97\xc0\xc2\x18\x69\x61\x08\xc7\x4b\x20\x61\x68\xdd\x26\x22\x0b\xc1\x9d\x29\x2f\x2c\x27\xf5\x29\xef\xfa\x46\xc1\xb4\x48\x26\x09\xdc\x6f\xdb\x18\x92\xfb\x80\x6a\x5f\x85\x63\x29\x8f\x49\x0f\xc3\x2d\x5e\x52\x8a\x18\x38\xaf\x9c\xb7\x8d\x67\x5f\x8a\x35\x3b\xd3\x59\xb3\xaf\x60\xc7\xe4\xbf\x6b\xd9\x5f\x0b\x7f\x49\xa6\xd6\x72\x65\xaa\xc9\x4f\x2b\x5c\xa0\x65\x39\x29\x97\x66\xa1\x69\xe6\xac\x2a\x56\x41\x5c\xc9\x9a\xf0\x2c\x0a\x47\xfc\x83\x8d\x9f\xd6\x6a\xdc\x55\xd6\xb4\x1b\xfc\x04\x00\x00\xff\xff\xdb\xd4\x7e\xcf\x1a\x01\x00\x00"),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2021, 2, 4, 10, 24, 43, 562315500, time.UTC),
			uncompressedSize: 369,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x5c\xd0\xc1\x4e\xc4\x20\x10\x06\xe0\x7b\x9f\x62\x82\x17\x3d\xb0\x4d\x3d\x1a\xca\x61\xcd\x3e\x81\x4f\x30\x85\x59\x8b\xdb\x42\x33\x60\x4d\x43\x78\x77\xe3\xb2\xcd\xaa\xa7\x49\x7e\xe0\xfb\xc9\xe4\x6c\xe9\xec\x3c\x81\x48\x2e\x4d\x24\x4a\x61\xf2\x96\x18\x24\x9c\x98\x03\x43\xce\x87\xb7\x84\xe9\x33\xbe\x06\x4b\xa5\xe4\x4c\xde\x96\xd2\xdc\xdf\x99\xe0\x13\xf9\x24\x4a\x69\x94\x75\x2b\x98\x09\x63\xec\xc5\x82\xef\x24\x47\x42\x4b\x2c\x74\x03\xa0\xc6\x4e\x57\xf1\xe1\x1f\xa9\xe2\x8c\xd3\xa4\x41\xde\xbb\x4a\x51\x6d\x4d\x55\x3b\x76\xba\x51\xad\x75\xab\xfe\xe3\x73\xf8\xaa\xee\xaf\xcc\x84\x49\xc6\x59\x76\xcf\xd7\x13\x00\xb5\x30\x81\xb3\xbd\x20\xe6\x63\xb0\x9b\xd0\x39\x1f\x4e\xcc\x3f\xfc\xc2\xb4\x5f\xaa\x13\x40\x21\x8c\x4c\xe7\x5e\x7c\xe0\x8a\xd1\xb0\x5b\xd2\xcb\xe8\x62\x0a\xbc\x1d\x06\x34\x97\xc7\x27\xb1\x37\x0d\xc9\xc3\x90\xbc\x5c\xd8\xcd\xc8\x9b\xd0\x47\x34\x17\xd5\xe2\x8d\x6c\xaf\xe6\xfe\xeb\x3a\x6e\x9b\xfb\x0e\x00\x00\xff\xff\x6b\x12\x36\x5b\x71\x01\x00\x00"),
		},
		"/landing": &vfsgen۰DirInfo{
			name:    "landing",
			modTime: time.Date(2021, 2, 4, 10, 30, 18, 864142917, time.UTC),
		},
		"/landing/about.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "about.tmpl",
			modTime:          time.Date(2021, 2, 4, 13, 6, 7, 889443270, time.UTC),
			uncompressedSize: 155,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x4c\xcc\xb1\xaa\xc3\x30\x0c\x85\xe1\xdd\x4f\x71\xae\x77\x11\xb2\xfb\x1a\xba\x77\xec\x0b\xb8\x91\x1a\x1b\x82\x52\x12\x37\x1d\x84\xde\xbd\x64\x28\x74\x3a\xc3\xf9\xf8\xcd\xc0\xf2\x68\x2a\x88\xbd\xf5\x45\x22\xdc\xaf\x45\xb9\xe9\x0c\xc2\xe5\xbe\xbe\xba\x19\x44\x19\xee\xe1\x07\x4f\xab\x76\xd1\x7e\xf2\x90\xb8\x1d\x98\x96\xb2\xef\xff\xf1\x59\x66\xa1\x2a\x85\x65\x8b\x39\x00\xa9\x8e\xf9\x56\x05\xe5\x2c\xe1\x7c\xd3\x50\xc7\x1c\xd2\xc0\xed\xf8\x0e\xd2\x1f\x11\x86\x6d\x7d\x83\x28\x07\x33\x51\x76\xff\x04\x00\x00\xff\xff\xeb\xd0\x45\x14\x9b\x00\x00\x00"),
		},
		"/landing/index.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "index.tmpl",
			modTime:          time.Date(2021, 2, 4, 13, 7, 16, 336110736, time.UTC),
			uncompressedSize: 3913,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x9c\x57\x5b\x4f\x64\x37\x12\x7e\xe7\x57\xd4\xf2\x1c\x8c\xf2\xce\x22\xa1\x4d\x47\x41\x9a\x90\xdd\x30\xcc\xbb\xdb\xae\xee\xae\x95\x2f\x07\xbb\x7c\x76\x25\xc4\x7f\x8f\xca\xb7\x3e\x88\x01\x45\xf3\x94\x4c\xb7\xdb\xae\xfa\x6e\x55\xbc\xbc\x80\xc5\x03\x05\x84\x4b\x26\x76\x78\x09\xaf\xaf\x5f\x74\xb0\x14\x8e\x70\x05\xf7\xc1\xe2\xff\x5f\x5e\x00\x83\x85\xd7\xd7\x8b\xcd\x61\x13\x03\x63\x60\x39\x7e\x71\x63\x69\x05\xe3\x74\xce\xff\xbc\x5c\xf4\x11\xaf\x4e\xa8\x2d\xa6\xcb\xdb\x0b\x80\x9b\xd3\xcf\xb7\xf5\x16\x70\xfd\x56\x39\x71\x73\x7d\xfa\xf9\xf6\xe2\x66\xb9\xfd\x12\x13\x7a\xa0\x25\x17\x0f\x36\xba\x98\x20\x13\x83\xf6\xc8\x3f\x81\x89\x21\xa3\x61\xe4\x92\x40\x5b\x5a\x28\x1b\xf9\x3d\x3a\xe2\x9f\x20\xa3\x05\x1b\x01\xa9\x64\x1f\x2d\x30\xfa\x25\x26\xa0\x60\xc8\x92\x2d\x81\xa1\x30\x38\xbd\x8f\x09\x01\xb9\x5d\x8d\xe0\xf5\x31\x68\xd0\x8e\x9e\x8b\x56\xf0\x88\x16\x0e\xba\x18\xda\x97\x0c\x5c\xd2\x42\x19\x28\x00\x16\xf0\x04\x7b\xda\x63\xb0\xc5\x2b\xb8\x03\x9d\x4c\x01\x53\x52\x2e\x19\x56\x62\x8d\x52\xda\xb1\xc8\x7d\x25\x51\x86\x74\x8a\xc1\x94\x0c\x1a\x03\xea\x00\x2b\xba\x5a\xa4\x82\x3b\x79\x09\x79\x5e\x06\x18\xc8\xc3\x41\x1b\x72\x94\x29\xc3\x31\xe9\x95\xac\x86\x80\xcf\xa5\x5e\xba\x6a\xe7\x28\x2b\xf8\xda\xda\x89\xc9\x90\xd4\xe3\xe2\x3e\x26\xa6\x0c\xe8\xd0\x63\xe0\xe2\x21\xd0\xfe\x04\x8c\xce\x95\x0c\x3e\x3a\xcc\x4c\xa8\xe0\xb1\x83\x07\x98\x19\x16\xa7\x0d\x26\xcd\xb5\xa9\x23\x66\xd6\x19\xda\xbf\xfd\x82\xc9\x12\x4a\x85\x72\xf8\x13\xa0\xc1\x16\xca\xc0\x89\x32\x4b\x2b\x90\xa3\x73\x64\x88\x8b\xa5\xd0\x6a\x18\x7c\x29\x78\x72\x9c\xc8\x60\x05\x91\xb4\x29\x8e\x32\x84\x12\x8c\x70\xa5\xe0\x0f\x4b\x71\xd3\x7a\x87\x6e\xfc\x1a\xbc\xce\xb9\x73\xb2\x16\xb7\x14\xd6\x8c\xc2\xc3\xe6\x40\xfd\x81\x89\xde\x47\x1b\xe1\x59\xea\xda\x34\xf2\x1b\x06\x9b\x30\x51\xe7\xba\x53\x8d\xc7\x8e\x85\xfb\x50\x67\x0a\x1e\x2a\xfa\x8d\x58\xd1\x51\xc9\xf0\x5c\xb4\x87\x05\x9d\xc3\xc0\x98\xe5\xeb\x80\x06\x82\xf6\x0a\xfe\x23\x0f\x27\x12\x2d\xe4\x37\xc5\x46\x69\xb0\xb0\x82\xaf\x55\x85\xa2\xc1\xc9\xdb\x01\xcb\x91\x34\xc3\x4a\xab\xf6\xa2\x14\x06\x5d\x8e\x05\xd5\xcd\xf5\x52\x7d\xf0\x88\x1e\x42\x71\x4e\xc3\x72\xd2\x09\x39\x69\xb0\xa4\xfd\xb9\xfd\x40\xd9\x35\x78\xea\x3b\x3e\xa6\x3d\x35\x10\x06\x22\xf5\xf3\x2e\x41\xa9\xec\xcc\xa4\x82\xfb\x00\x31\x05\x9d\xb0\x75\xb6\xd2\x8a\x29\xe9\xa6\xaf\xac\x8f\xc4\x2c\xaa\xdb\x09\xe1\x15\xb2\x21\x4c\x53\x3c\xe4\x68\x48\x98\xd4\x1c\x9f\x0b\x2a\xb8\x2b\x86\x63\xea\x9a\x7d\x87\x9a\x82\x7f\xc7\xc4\x4c\x5c\x39\xc8\x59\x03\xd9\x7e\xb6\xf9\xce\xc3\x2a\x62\xdd\x17\x57\x7c\x6f\x63\x5f\xa3\x81\x87\xc5\x2a\xb8\x0a\xfe\x68\x05\x3b\x34\x5c\x36\x42\xf9\x4c\xd9\x0a\x9e\xb8\x79\x6c\x5c\xb9\x46\x57\x78\xd1\x22\x1f\x34\x18\x74\x56\xf0\x2b\xa6\xee\xa1\x8a\x18\x96\xc9\xce\x92\x90\xa9\x7b\x4b\xc1\x1d\x77\x9a\x07\x5a\x1b\x6b\xc8\x53\x3b\x9e\x6f\x37\x31\x56\x71\xe5\x92\x17\x0c\x96\x72\x46\x05\xbf\x8b\x5b\xce\x26\x10\x28\x32\x8a\x66\xfb\xcd\x14\xe0\x34\x74\x2b\xe4\xd6\xaf\x46\x35\xcd\x5d\x68\x61\x29\x6e\xa5\xa0\xd3\x14\xcb\xc3\xb8\xaf\x6a\x08\x9c\x36\x9b\x2a\x2b\x23\x0a\x9e\x52\xa8\xd0\x4f\x00\xda\x29\xa7\x63\x42\x91\x53\x0c\x02\xb7\xde\x93\x98\x7e\xd0\x5d\x83\x4e\x9b\xda\x7b\xc7\xbd\xc8\x3d\xb6\xe9\xac\xc7\xd3\xe6\xff\x7a\x00\x91\x05\x0a\x8c\xa9\xe6\xe5\x6f\xda\xc0\x49\x2e\xd6\x39\xa3\x50\xc5\x28\x62\x36\x5c\x7c\xe6\x0a\x55\x95\xd1\xdf\x91\xa4\x90\x33\x1b\x88\x6f\x02\x44\xc1\x9d\x81\x03\x4a\x11\x36\x8a\x39\xb1\x9f\x78\xe3\xda\xea\xa1\x79\xc3\x70\x4a\xcd\xa3\xdd\x8c\x52\x29\xfd\x88\xa9\x09\xa7\xcb\x7a\xfc\x44\x1b\xe0\x69\xe7\x26\xf6\xce\xa0\x34\x22\xd9\x51\x63\x61\x6a\x3b\xa3\x97\x4a\x38\x26\x31\x40\x0d\xd6\xe7\x22\x42\xb5\xb0\xc4\xc4\xba\x6b\xeb\xf7\xea\x8c\x6e\x9e\x79\xd6\x52\xaf\xc8\x69\x43\x81\x74\xd3\xd5\x8a\x6e\x64\xd4\xd0\x5b\x1f\x3f\x1d\xcb\xf9\x71\xed\x96\xc2\x76\x5e\x29\xf8\xb3\x0f\x27\xaf\x2b\xa2\x63\x56\x55\x5e\x87\x87\x1b\xf4\xff\x2d\x99\xa3\x04\x9c\xf6\xf3\x6a\xb2\x1d\x43\x74\x8d\xa7\xf3\x04\x9a\xb2\x14\xb5\x4c\xc0\xea\xe9\xc2\xb0\x62\xc0\xa0\x79\xa3\x91\x00\x1e\x45\x51\xe7\xc4\xc4\xa2\xe0\x97\x42\xf2\x48\x97\x42\xad\xbc\x07\x69\xc5\xf2\x6d\x26\x36\x7f\x97\xfa\xcd\x60\xad\x81\x58\x6b\x6f\xd9\xd5\x92\xff\x30\x5d\xde\x47\x91\x82\x3f\x3f\x0b\xed\xdd\x87\x4a\xdb\x8c\x2a\x05\xdf\xd0\xc1\x21\x51\x38\x92\xd4\x25\x59\x24\x05\x7a\x13\x93\x68\xa2\xbe\xdf\x4a\x1e\x3f\x07\x64\x92\x54\x7c\xa8\xe7\xaa\x9e\x1a\xdf\xad\xee\xa5\xa4\x92\xe7\x16\x32\x1d\xbe\x13\x29\xce\xc8\x3b\x63\x59\x59\xeb\x31\xd9\x1f\x93\x28\x30\xe8\x30\x35\xc2\x3a\x99\x67\xde\x6b\x5e\x6e\x3d\x51\xc7\xfa\xb6\x6a\x4b\xc7\x40\x39\x93\xaf\xa6\xdc\x2a\xf9\xdc\x69\xe1\x9e\xd5\x67\x37\xb4\xf0\x39\xfb\x7e\xee\x1e\x9f\xac\x13\x0a\xee\x7f\x20\x92\x04\xbd\x60\x5a\x65\x3f\xb2\x4d\xed\x52\x1c\x29\xa1\x4d\x63\x97\x37\x0b\x96\xd5\x4b\x5d\x01\xcb\xfb\xfd\x45\x10\x69\xfd\xbd\xe9\xca\xd1\x1e\x53\x14\xdd\xce\xfd\xb1\xcd\xe7\x5d\x16\xb6\xfa\x18\x6d\x9e\xfc\x50\xdf\x0a\x1e\x37\xbc\xb5\x28\x9b\x0b\x0d\x2c\x29\x52\xd8\xa8\xd8\x61\xac\x26\xac\x15\xf7\x28\x89\x41\xc1\x83\x68\xac\x07\x53\xc9\x86\x16\xe2\xb9\x16\x36\xdd\xf6\x4d\xe2\x3c\x00\x1f\x28\xbb\x39\xeb\x0e\x25\x9b\x6a\xf3\x56\x76\x99\xd9\x35\x0e\x0c\x41\x0d\x69\x7e\xd3\x89\xea\xce\x29\x6a\x68\x91\x29\xe4\x4c\x09\x4b\x1a\xe8\xb6\x22\xb4\x8c\x91\x6f\xc9\xce\x3c\xfa\xf6\x1d\xdd\x0f\x78\xde\x0c\xcf\x27\x1e\x1f\x7f\xb6\x02\x28\xf8\xd2\xc8\x68\x09\x30\xc4\x74\xde\xee\x1e\xdf\x9b\x63\x20\x43\x1f\xab\xbd\x5a\x41\xde\xd1\x81\x45\xe4\x3d\xb7\xbf\xb6\xbf\x12\x06\xb9\x73\x72\x88\x15\xbb\x3c\x05\xdf\xfd\x09\x4c\xd2\x79\x46\xe4\x08\xdf\xb9\x08\xf4\xf5\x44\xc1\xaf\x7f\xdf\x61\x43\x58\x85\xea\x5f\x3c\x14\x64\x8c\x38\xcc\x45\x5b\x89\x1b\x8f\xb9\xa6\xcb\xdb\x0a\xe5\xb1\xbe\x9d\x55\x36\x44\x59\x33\x4c\x77\xdf\x5f\x7d\xda\x26\x23\xb7\x57\x94\xa6\x2d\x50\x6c\x44\x61\xe4\x4f\x7f\xa9\x2f\xee\xbb\xcf\x53\x59\xc1\x2f\x23\x65\xb6\x2c\xd7\x05\xee\x8c\xb2\x82\xfb\x69\x80\x16\xa3\x7e\x76\xf8\x2e\xc3\xaa\x42\xa6\x82\x26\xd4\xf8\xc9\x5c\x57\xf0\xaf\x39\x91\xfb\x18\x1f\x92\x90\x21\xee\xbe\xa3\xa4\xae\xfb\x6b\x4b\xeb\xf8\x0f\xdc\xfc\xe3\xea\x0a\xae\x53\xfc\x1f\x5c\x5d\xdd\x5e\xbc\xbc\x60\xb0\xaf\xaf\x7f\x05\x00\x00\xff\xff\xab\x4d\x23\xfb\x49\x0f\x00\x00"),
		},
		"/news": &vfsgen۰DirInfo{
			name:    "news",
			modTime: time.Date(2021, 2, 4, 10, 13, 52, 723352114, time.UTC),
		},
		"/news/overview.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "overview.tmpl",
			modTime:          time.Date(2021, 2, 4, 15, 10, 54, 533961494, time.UTC),
			uncompressedSize: 408,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x54\x90\x41\x8b\xfb\x20\x14\xc4\xef\x7e\x8a\xf7\x7f\xf4\xf8\xb7\x25\x3d\x2d\xc5\x08\x0b\x7b\xd9\x4b\x77\x0f\x85\x3d\x4b\x7c\x6d\x04\xa3\x41\xdd\xa4\xf0\xf0\xbb\x2f\x29\x29\x34\x27\x65\x66\xf8\xcd\x28\x33\x58\xba\xba\x40\x80\xc5\x15\x4f\x08\xb5\xaa\xc7\x4d\x33\xbb\xe6\x2d\x00\x9e\x69\xce\x5f\x13\xa5\xc9\xd1\x8c\xb5\xaa\xc3\xd3\x06\x0a\x16\x6a\x15\x2f\x8c\x2e\x86\x42\xa1\x2c\x14\xa1\xac\x9b\xa0\xf3\x26\xe7\x16\x47\x73\x23\xd9\x93\xb1\x94\x50\x0b\x00\xd5\x37\xe0\x6c\x8b\x33\xf9\x2e\x0e\x84\x9b\xb2\x9f\x55\x5c\xba\xfa\x46\x0b\x75\xb0\x6e\xd2\x1b\x5e\x8a\x33\x6e\x95\x2e\x7a\x39\x58\xd9\x1c\x51\x0b\xe6\x64\xc2\x8d\x60\xe7\x82\xa5\xfb\x7f\xd8\x91\xa7\x81\x42\x81\x53\x0b\xfb\x77\xef\xbf\x63\x2e\xb9\x56\x21\x84\x32\xd0\x27\xba\xb6\xc8\xfc\x9b\xfc\x25\x02\x06\x9a\xf3\x69\x8c\xb9\x20\xe0\x92\xfb\xfc\xc0\x95\x53\xeb\x3a\xfd\xa8\x99\x9f\xc8\xfd\xd9\x0c\xf4\x18\x7a\x5c\x86\x1a\x2d\x84\x1a\x5f\xfd\x0b\xdd\xcb\xe2\x8f\x5a\x08\x66\x0a\x76\xf9\x99\xf5\x41\x8f\x03\xd4\x3f\x29\xe1\x90\xe2\x0c\x52\xea\x67\xe6\x2f\x00\x00\xff\xff\x0e\x86\xb8\x99\x98\x01\x00\x00"),
		},
		"/news/post.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "post.tmpl",
			modTime:          time.Date(2021, 2, 4, 15, 2, 43, 263154067, time.UTC),
			uncompressedSize: 378,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x74\x8e\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\xc5\x71\x13\x0c\x4e\x14\x46\xe4\x78\xea\xd2\x25\x30\xf4\x05\xac\xf8\x4a\x2c\xa5\x76\x64\x9b\x24\x92\x75\xef\x8e\x9c\x42\xa1\x43\xa7\x3b\x7d\xd2\xf7\xe9\xcf\x19\x0c\x9d\xad\x23\xc0\x64\xd3\x44\x08\xcc\x72\xff\x54\x4f\x6b\x04\x01\x1f\x3e\x26\xd9\x5c\x51\xce\x40\xce\x00\x73\xf5\xcf\x1b\xbc\x4b\xe4\x52\x31\x2b\x69\xec\x02\xc3\xa4\x63\xec\x70\xd6\x9f\x24\x46\xd2\x86\x02\xaa\x0a\x40\x8e\xad\xca\xb9\x2e\xbd\xba\xd7\x17\x62\x96\xcd\xd8\xaa\x4a\x36\xc6\x2e\xea\x4e\x0d\x7e\xc5\x7b\x32\xf8\x49\x5c\x8c\x68\x5f\x0b\x9f\x6f\x9d\x13\x6d\xa9\x74\xe6\xbf\xcc\x7e\x40\x3e\x09\x01\x4d\xf0\x2b\x08\xa1\x2a\xa9\x61\x0c\x74\xee\x30\xe7\xaf\x30\x9d\x3c\xa0\xa3\x35\xbe\xf9\x85\xc2\x62\x69\x45\x66\x04\x6b\x3a\xbc\x01\xf5\xfe\xf3\xc9\x46\x3f\xd4\x67\x1f\x13\x02\x96\x21\xc7\x03\xc2\xb3\x75\x03\x5c\x67\x1d\x0f\x2f\xbf\x49\x47\x5b\x42\xd5\xd3\x96\xea\xba\xde\x6b\x39\x93\x33\xcc\xdf\x01\x00\x00\xff\xff\x5d\xc8\x9a\xef\x7a\x01\x00\x00"),
		},
		"/testing": &vfsgen۰DirInfo{
			name:    "testing",
			modTime: time.Date(2021, 2, 4, 10, 45, 49, 325927577, time.UTC),
		},
		"/testing/base.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "base.tmpl",
			modTime:          time.Date(2021, 2, 4, 10, 45, 50, 591902911, time.UTC),
			uncompressedSize: 243,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x54\x8f\xb1\xae\x83\x30\x0c\x45\x77\xbe\xc2\x2f\xfb\x23\x6b\x87\xc0\x52\x3a\xb7\x03\x4b\xc7\x90\x18\x11\x35\x04\x09\x0c\x6a\x15\xe5\xdf\x2b\x07\x5a\xa9\x53\x14\x5f\x9f\x73\x65\xf5\xd7\x5c\xcf\xed\xfd\x76\x81\x81\x46\x5f\x17\xea\xf3\xa0\xb6\x75\x01\xa0\x46\x24\x0d\x66\xd0\xf3\x82\x54\x89\x95\xfa\xff\x93\x00\x99\x23\x72\xe4\xb1\x8e\xb1\xf3\x93\x79\x80\xc8\x5f\x01\x65\x4a\x0d\xf6\x7a\xf5\x04\x2d\x4f\x62\xc4\x60\x53\x52\x72\x5f\x2f\x94\xdc\xdd\xaa\x9b\xec\x8b\x3d\x5f\x01\x3e\x69\xd6\x59\x70\x30\x5c\x62\xdd\x06\xc6\xeb\x65\xa9\x84\x99\x02\x69\x17\x70\x16\x8c\x31\x08\x07\xc9\x09\x06\x12\x50\xc2\x0f\x2c\xad\xdb\xb8\x71\xaf\x52\x32\x1f\xf7\x0e\x00\x00\xff\xff\xd6\x0a\x65\x40\xf3\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/admin"].(os.FileInfo),
		fs["/auth"].(os.FileInfo),
		fs["/base.tmpl"].(os.FileInfo),
		fs["/error.tmpl"].(os.FileInfo),
		fs["/landing"].(os.FileInfo),
		fs["/news"].(os.FileInfo),
		fs["/testing"].(os.FileInfo),
	}
	fs["/landing"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/landing/about.tmpl"].(os.FileInfo),
		fs["/landing/index.tmpl"].(os.FileInfo),
	}
	fs["/news"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/news/overview.tmpl"].(os.FileInfo),
		fs["/news/post.tmpl"].(os.FileInfo),
	}
	fs["/testing"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/testing/base.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
