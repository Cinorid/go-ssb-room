// Code generated by counterfeiter. DO NOT EDIT.
package mockdb

import (
	"context"
	"sync"

	"github.com/ssb-ngi-pointer/go-ssb-room/roomdb"
)

type FakeRoomConfig struct {
	GetPrivacyModeStub        func(context.Context) (roomdb.PrivacyMode, error)
	getPrivacyModeMutex       sync.RWMutex
	getPrivacyModeArgsForCall []struct {
		arg1 context.Context
	}
	getPrivacyModeReturns struct {
		result1 roomdb.PrivacyMode
		result2 error
	}
	getPrivacyModeReturnsOnCall map[int]struct {
		result1 roomdb.PrivacyMode
		result2 error
	}
	SetPrivacyModeStub        func(context.Context, roomdb.PrivacyMode) error
	setPrivacyModeMutex       sync.RWMutex
	setPrivacyModeArgsForCall []struct {
		arg1 context.Context
		arg2 roomdb.PrivacyMode
	}
	setPrivacyModeReturns struct {
		result1 error
	}
	setPrivacyModeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoomConfig) GetPrivacyMode(arg1 context.Context) (roomdb.PrivacyMode, error) {
	fake.getPrivacyModeMutex.Lock()
	ret, specificReturn := fake.getPrivacyModeReturnsOnCall[len(fake.getPrivacyModeArgsForCall)]
	fake.getPrivacyModeArgsForCall = append(fake.getPrivacyModeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetPrivacyModeStub
	fakeReturns := fake.getPrivacyModeReturns
	fake.recordInvocation("GetPrivacyMode", []interface{}{arg1})
	fake.getPrivacyModeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRoomConfig) GetPrivacyModeCallCount() int {
	fake.getPrivacyModeMutex.RLock()
	defer fake.getPrivacyModeMutex.RUnlock()
	return len(fake.getPrivacyModeArgsForCall)
}

func (fake *FakeRoomConfig) GetPrivacyModeCalls(stub func(context.Context) (roomdb.PrivacyMode, error)) {
	fake.getPrivacyModeMutex.Lock()
	defer fake.getPrivacyModeMutex.Unlock()
	fake.GetPrivacyModeStub = stub
}

func (fake *FakeRoomConfig) GetPrivacyModeArgsForCall(i int) context.Context {
	fake.getPrivacyModeMutex.RLock()
	defer fake.getPrivacyModeMutex.RUnlock()
	argsForCall := fake.getPrivacyModeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRoomConfig) GetPrivacyModeReturns(result1 roomdb.PrivacyMode, result2 error) {
	fake.getPrivacyModeMutex.Lock()
	defer fake.getPrivacyModeMutex.Unlock()
	fake.GetPrivacyModeStub = nil
	fake.getPrivacyModeReturns = struct {
		result1 roomdb.PrivacyMode
		result2 error
	}{result1, result2}
}

func (fake *FakeRoomConfig) GetPrivacyModeReturnsOnCall(i int, result1 roomdb.PrivacyMode, result2 error) {
	fake.getPrivacyModeMutex.Lock()
	defer fake.getPrivacyModeMutex.Unlock()
	fake.GetPrivacyModeStub = nil
	if fake.getPrivacyModeReturnsOnCall == nil {
		fake.getPrivacyModeReturnsOnCall = make(map[int]struct {
			result1 roomdb.PrivacyMode
			result2 error
		})
	}
	fake.getPrivacyModeReturnsOnCall[i] = struct {
		result1 roomdb.PrivacyMode
		result2 error
	}{result1, result2}
}

func (fake *FakeRoomConfig) SetPrivacyMode(arg1 context.Context, arg2 roomdb.PrivacyMode) error {
	fake.setPrivacyModeMutex.Lock()
	ret, specificReturn := fake.setPrivacyModeReturnsOnCall[len(fake.setPrivacyModeArgsForCall)]
	fake.setPrivacyModeArgsForCall = append(fake.setPrivacyModeArgsForCall, struct {
		arg1 context.Context
		arg2 roomdb.PrivacyMode
	}{arg1, arg2})
	stub := fake.SetPrivacyModeStub
	fakeReturns := fake.setPrivacyModeReturns
	fake.recordInvocation("SetPrivacyMode", []interface{}{arg1, arg2})
	fake.setPrivacyModeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRoomConfig) SetPrivacyModeCallCount() int {
	fake.setPrivacyModeMutex.RLock()
	defer fake.setPrivacyModeMutex.RUnlock()
	return len(fake.setPrivacyModeArgsForCall)
}

func (fake *FakeRoomConfig) SetPrivacyModeCalls(stub func(context.Context, roomdb.PrivacyMode) error) {
	fake.setPrivacyModeMutex.Lock()
	defer fake.setPrivacyModeMutex.Unlock()
	fake.SetPrivacyModeStub = stub
}

func (fake *FakeRoomConfig) SetPrivacyModeArgsForCall(i int) (context.Context, roomdb.PrivacyMode) {
	fake.setPrivacyModeMutex.RLock()
	defer fake.setPrivacyModeMutex.RUnlock()
	argsForCall := fake.setPrivacyModeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRoomConfig) SetPrivacyModeReturns(result1 error) {
	fake.setPrivacyModeMutex.Lock()
	defer fake.setPrivacyModeMutex.Unlock()
	fake.SetPrivacyModeStub = nil
	fake.setPrivacyModeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoomConfig) SetPrivacyModeReturnsOnCall(i int, result1 error) {
	fake.setPrivacyModeMutex.Lock()
	defer fake.setPrivacyModeMutex.Unlock()
	fake.SetPrivacyModeStub = nil
	if fake.setPrivacyModeReturnsOnCall == nil {
		fake.setPrivacyModeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setPrivacyModeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoomConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPrivacyModeMutex.RLock()
	defer fake.getPrivacyModeMutex.RUnlock()
	fake.setPrivacyModeMutex.RLock()
	defer fake.setPrivacyModeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoomConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ roomdb.RoomConfig = new(FakeRoomConfig)
